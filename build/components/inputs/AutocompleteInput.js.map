{"version":3,"file":"AutocompleteInput.js","sources":["../../../src/components/inputs/AutocompleteInput.tsx"],"sourcesContent":["import React, { useState, SyntheticEvent } from \"react\"\r\nimport Autocomplete, { AutocompleteRenderInputParams } from \"@material-ui/lab/Autocomplete\"\r\nimport { makeStyles, TextField } from \"@material-ui/core\"\r\nimport { ClassNameMap } from \"@material-ui/core/styles/withStyles\"\r\nimport { paper } from \"../../theme/overrides/paper\"\r\n\r\nconst useStyles: (props?: any) => ClassNameMap<any> = makeStyles({\r\n  root : {\r\n    width : \"100%\"\r\n  },\r\n  highlightedPart : {\r\n    fontWeight : 600\r\n  },\r\n  input : {\r\n    padding : \"0px !important\"\r\n  },\r\n  listbox : {\r\n    padding : 0\r\n  },\r\n  paper : paper\r\n})\r\n\r\nexport interface AutocompleteData {\r\n  value?: string\r\n  text?: string\r\n  label: string\r\n}\r\n\r\nexport interface AutocompleteInputProps {\r\n  /**\r\n   * Search results to display in drop down\r\n   */\r\n  options: Array<AutocompleteData>\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  placeholder: string\r\n  /**\r\n   * Field unique identifier\r\n   */\r\n  id: string\r\n  /**\r\n   * Callback fired when text value is changed\r\n   */\r\n  onChange: (text: string) => void\r\n  /**\r\n   * Callback fired when one item is selected\r\n   */\r\n  onSelect: (data: AutocompleteData) => void\r\n}\r\n\r\nconst splitOn = (slicable: string, ...indices: Array<number>): Array<string> => {\r\n  return [ 0, ...indices ].map((position: number, index: number, array: Array<number>) => slicable.slice(position, array[index + 1]))\r\n}\r\n\r\nexport const AutocompleteInput = ({ options, placeholder, id, onChange, onSelect }: AutocompleteInputProps): JSX.Element => {\r\n  const classes: ClassNameMap<any> = useStyles()\r\n\r\n  const [ inputValue, setInputValue ]: Array<any> = useState<string>(\"\")\r\n\r\n  const renderInput = (params: AutocompleteRenderInputParams): JSX.Element => (<TextField {...params} fullWidth placeholder={placeholder} />)\r\n\r\n  const renderOption = (option: AutocompleteData): JSX.Element => {\r\n    const position: number = option.label.toLowerCase().indexOf(inputValue.toLowerCase())\r\n    const result: Array<string> = splitOn(option.label, position, position + inputValue.length)\r\n    return (\r\n      <div>\r\n        {result.map((part: string, index: number) => {\r\n          if (index === 1) {\r\n            return <span key={String(index)} className={classes.highlightedPart}>{part}</span>\r\n          } else {\r\n            return <span key={String(index)}>{part}</span>\r\n          }\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const getOptionLabel = (option: AutocompleteData): string => {\r\n    return option.label\r\n  }\r\n\r\n  const handleInputChange = (event: SyntheticEvent<any>, newInputValue: string): void => {\r\n    onChange(newInputValue)\r\n    setInputValue(newInputValue)\r\n  }\r\n\r\n  const handleChange = (event: SyntheticEvent<any>, newValue: any): void => {\r\n    onSelect(newValue)\r\n    if (!newValue) {\r\n      setInputValue(\"\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Autocomplete\r\n      className={classes.root}\r\n      classes={{\r\n        inputRoot : classes.input,\r\n        listbox   : classes.listbox,\r\n        paper     : classes.paper\r\n      }}\r\n      autoSelect={true}\r\n      options={options}\r\n      onInputChange={handleInputChange}\r\n      onChange={handleChange}\r\n      renderInput={renderInput}\r\n      renderOption={renderOption}\r\n      getOptionLabel={getOptionLabel}\r\n      {...id}\r\n    />\r\n  )\r\n}\r\n"],"names":["React"],"mappings":"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"}