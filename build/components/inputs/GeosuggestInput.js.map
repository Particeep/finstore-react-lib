{"version":3,"file":"GeosuggestInput.js","sources":["../../../src/components/inputs/GeosuggestInput.tsx"],"sourcesContent":["import React from \"react\"\r\nimport MUIPlacesAutocomplete,  { geocodeByPlaceID }  from  \"mui-places-autocomplete\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport { ClassNameMap } from \"@material-ui/core/styles/withStyles\"\r\n\r\nconst useStyles: (props?: any) => ClassNameMap<any> = makeStyles({\r\n  root : {\r\n    position : \"relative\",\r\n    width    : \"100%\"\r\n  }\r\n})\r\n\r\nexport interface GoogleAddress {\r\n  street_number: string\r\n  route: string\r\n  postal_code: string\r\n  locality: string\r\n  country: string\r\n}\r\n\r\nconst googleAddressMap: GoogleAddress = {\r\n  street_number : \"short_name\",\r\n  route         : \"long_name\",\r\n  locality      : \"long_name\",\r\n  country       : \"short_name\",\r\n  postal_code   : \"short_name\"\r\n}\r\n\r\nexport interface GeosuggestInputProps {\r\n  /**\r\n  * Callback fired when address is selected\r\n  */\r\n  onPlaceChanged: (address: GoogleAddress) => void\r\n  /**\r\n   * Initial address in the field\r\n   */\r\n  value: string\r\n  /**\r\n   * Field placeholder\r\n   */\r\n  placeholder: string\r\n  /**\r\n   * Set the field as required\r\n   */\r\n  required: boolean\r\n}\r\n\r\nexport const GeosuggestInput = ({ onPlaceChanged, value, placeholder, required }: GeosuggestInputProps): JSX.Element => {\r\n  const classes: ClassNameMap<any> = useStyles()\r\n\r\n  const onAddressSelect = (suggestion: any): void => {\r\n    if (suggestion) {\r\n      geocodeByPlaceID(suggestion.place_id).then((place: string | any[]) => {\r\n        if (place.length > 0 ) {\r\n          onPlaceChanged(buildAddress(place[0]))\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const buildAddress = (place: any): GoogleAddress => {\r\n    return place.address_components.reduce((acc: any, addressItem: any): any => {\r\n      const addressType: any = addressItem.types[0]\r\n      return {\r\n        ...acc,\r\n        [addressType] : addressItem[googleAddressMap[addressType]]\r\n      }\r\n    }, {})\r\n  }\r\n\r\n  const renderTarget = (): JSX.Element => (<div />)\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <MUIPlacesAutocomplete\r\n        onSuggestionSelected={onAddressSelect}\r\n        initialValue={value}\r\n        renderTarget= {renderTarget}\r\n        textFieldProps={{ placeholder, required, fullWidth: true }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"],"names":["geocodeByPlaceID","React"],"mappings":";;;;;;AAKA,IAAM,SAAS,GAAuC,UAAU,CAAC;IAC/D,IAAI,EAAG;QACL,QAAQ,EAAG,UAAU;QACrB,KAAK,EAAM,MAAM;KAClB;CACF,CAAC,CAAA;AAUF,IAAM,gBAAgB,GAAkB;IACtC,aAAa,EAAG,YAAY;IAC5B,KAAK,EAAW,WAAW;IAC3B,QAAQ,EAAQ,WAAW;IAC3B,OAAO,EAAS,YAAY;IAC5B,WAAW,EAAK,YAAY;CAC7B,CAAA;IAqBY,eAAe,GAAG,UAAC,EAAsE;QAApE,cAAc,oBAAA,EAAE,KAAK,WAAA,EAAE,WAAW,iBAAA,EAAE,QAAQ,cAAA;IAC5E,IAAM,OAAO,GAAsB,SAAS,EAAE,CAAA;IAE9C,IAAM,eAAe,GAAG,UAAC,UAAe;QACtC,IAAI,UAAU,EAAE;YACdA,6BAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAC,KAAqB;gBAC/D,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAG;oBACrB,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;iBACvC;aACF,CAAC,CAAA;SACH;KACF,CAAA;IAED,IAAM,YAAY,GAAG,UAAC,KAAU;QAC9B,OAAO,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,UAAC,GAAQ,EAAE,WAAgB;;YAChE,IAAM,WAAW,GAAQ,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;YAC7C,6BACK,GAAG,gBACL,WAAW,IAAI,WAAW,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,OAC3D;SACF,EAAE,EAAE,CAAC,CAAA;KACP,CAAA;IAED,IAAM,YAAY,GAAG,cAAmB,QAACC,yCAAO,IAAC,CAAA;IAEjD,QACEA,sCAAK,SAAS,EAAE,OAAO,CAAC,IAAI;QAC1BA,6BAAC,qBAAqB,IACpB,oBAAoB,EAAE,eAAe,EACrC,YAAY,EAAE,KAAK,EACnB,YAAY,EAAG,YAAY,EAC3B,cAAc,EAAE,EAAE,WAAW,aAAA,EAAE,QAAQ,UAAA,EAAE,SAAS,EAAE,IAAI,EAAE,GAC1D,CACE,EACP;AACH;;;;"}