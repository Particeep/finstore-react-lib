{"version":3,"file":"FormattedAmount.js","sources":["../../../src/components/formatters/FormattedAmount.tsx"],"sourcesContent":["import React from \"react\"\r\nimport { FormattedNumber as FormattedNumberReact } from \"react-intl\"\r\nimport { T } from \"../../conf/i18n\"\r\n\r\ninterface DisplayAmountProps {\r\n  amount   : number\r\n  currency : string\r\n}\r\n\r\nexport const DisplayAmount = ({ amount, currency }: DisplayAmountProps): JSX.Element => (\r\n  <FormattedNumber value={amount} currency={currency} variant=\"currency\" />\r\n)\r\n\r\ninterface DisplayPercentProps {\r\n  value: number\r\n}\r\n\r\nexport const DisplayPercent = ({ value }: DisplayPercentProps): JSX.Element => (\r\n  <FormattedNumber value={value} variant=\"percent\" />\r\n)\r\n\r\ninterface FormattedAmountProps {\r\n  row     : any\r\n  value   : number\r\n  variant : string\r\n}\r\n\r\nexport const FormattedAmount = ({ row, value, variant = \"currency\" }: FormattedAmountProps): JSX.Element => {\r\n  const currency: string = row.currency ? row.currency : \"EUR\"\r\n  return <FormattedNumber value={value} currency={currency} variant={variant} />\r\n}\r\n\r\nconst isValueExist = (value: string|number): boolean => !!value && value !== T.global.nc\r\n\r\ninterface FormattedNumberProps {\r\n  currency? : string\r\n  value     : number\r\n  variant?  : any\r\n}\r\n\r\nexport const FormattedNumber = ({ value, variant = \"standard\", currency = \"EUR\" }: FormattedNumberProps): JSX.Element => {\r\n  if (value !== 0 && !value) {\r\n    return <React.Fragment />\r\n  }\r\n\r\n  if (variant === \"currency\") {\r\n    return (\r\n      <FormattedNumberReact\r\n        value={isValueExist(value) ? (value / 100) : 0}\r\n        style={variant}\r\n        currency={currency}\r\n      />\r\n    )\r\n  } else if (variant === \"currency-standard\") {\r\n    return (\r\n      <FormattedNumberReact\r\n        value={isValueExist(value) ? value : 0}\r\n        style=\"currency\"\r\n        currency={currency}\r\n      />\r\n    )\r\n  } else if (variant === \"percent\") {\r\n    return <FormattedNumberReact value={value / 100} style={variant} minimumFractionDigits={2} />\r\n  } else {\r\n    return <FormattedNumberReact value={value} style={variant} />\r\n  }\r\n}\r\n"],"names":["React","FormattedNumberReact"],"mappings":";;;;IASa,aAAa,GAAG,UAAC,EAAwC;QAAtC,MAAM,YAAA,EAAE,QAAQ,cAAA;IAAwC,QACtFA,6BAAC,eAAe,IAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAC,UAAU,GAAG;AADa,EAEvF;IAMY,cAAc,GAAG,UAAC,EAA8B;QAA5B,KAAK,WAAA;IAAyC,QAC7EA,6BAAC,eAAe,IAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAC,SAAS,GAAG;AAD0B,EAE9E;IAQY,eAAe,GAAG,UAAC,EAA0D;QAAxD,GAAG,SAAA,EAAE,KAAK,WAAA,EAAE,eAAoB,EAApB,OAAO,mBAAG,UAAU,KAAA;IAChE,IAAM,QAAQ,GAAW,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAA;IAC5D,OAAOA,6BAAC,eAAe,IAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,GAAI,CAAA;AAChF,EAAC;AAED,IAAM,YAAY,GAAG,UAAC,KAAoB,IAAc,OAAA,CAAC,CAAC,KAAK,IAAI,KAAK,KAAK,CAAC,CAAC,MAAM,CAAC,EAAE,GAAA,CAAA;IAQ3E,eAAe,GAAG,UAAC,EAAuE;QAArE,KAAK,WAAA,EAAE,eAAoB,EAApB,OAAO,mBAAG,UAAU,KAAA,EAAE,gBAAgB,EAAhB,QAAQ,mBAAG,KAAK,KAAA;IAC7E,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE;QACzB,OAAOA,6BAACA,cAAK,CAAC,QAAQ,OAAG,CAAA;KAC1B;IAED,IAAI,OAAO,KAAK,UAAU,EAAE;QAC1B,QACEA,6BAACC,iBAAoB,IACnB,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,GAAG,IAAI,CAAC,EAC9C,KAAK,EAAE,OAAO,EACd,QAAQ,EAAE,QAAQ,GAClB,EACH;KACF;SAAM,IAAI,OAAO,KAAK,mBAAmB,EAAE;QAC1C,QACED,6BAACC,iBAAoB,IACnB,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,EACtC,KAAK,EAAC,UAAU,EAChB,QAAQ,EAAE,QAAQ,GAClB,EACH;KACF;SAAM,IAAI,OAAO,KAAK,SAAS,EAAE;QAChC,OAAOD,6BAACC,iBAAoB,IAAC,KAAK,EAAE,KAAK,GAAG,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC,GAAI,CAAA;KAC9F;SAAM;QACL,OAAOD,6BAACC,iBAAoB,IAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,GAAI,CAAA;KAC9D;AACH;;;;"}